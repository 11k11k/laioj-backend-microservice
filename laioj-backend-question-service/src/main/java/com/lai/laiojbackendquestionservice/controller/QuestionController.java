package com.lai.laiojbackendquestionservice.controller;import cn.hutool.json.JSONUtil;import com.baomidou.mybatisplus.extension.plugins.pagination.Page;import com.lai.laiojbackendmodel.model.dto.question.*;import com.lai.laiojbackendquestionservice.service.QuestionService;import com.lai.laiojbackendquestionservice.service.QuestionSubmitService;import com.lai.laiojbackendserviceclient.service.UserFeignClient;import com.lai.laiojbackendcommon.annotation.AuthCheck;import com.lai.laiojbackendcommon.common.BaseResponse;import com.lai.laiojbackendcommon.common.DeleteRequest;import com.lai.laiojbackendcommon.common.ErrorCode;import com.lai.laiojbackendcommon.common.ResultUtils;import com.lai.laiojbackendcommon.constant.UserConstant;import com.lai.laiojbackendcommon.exception.BusinessException;import com.lai.laiojbackendcommon.exception.ThrowUtils;import com.lai.laiojbackendmodel.model.dto.questionsubmit.QuestionSubmitAddRequest;import com.lai.laiojbackendmodel.model.dto.questionsubmit.QuestionSubmitQueryRequest;import com.lai.laiojbackendmodel.model.entity.Question;import com.lai.laiojbackendmodel.model.entity.QuestionSubmit;import com.lai.laiojbackendmodel.model.entity.User;import com.lai.laiojbackendmodel.model.vo.QuestionSubmitVO;import com.lai.laiojbackendmodel.model.vo.QuestionVO;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.BeanUtils;import org.springframework.web.bind.annotation.*;import javax.annotation.Resource;import javax.servlet.http.HttpServletRequest;import java.util.List;/** * 题目接口 */@RestController@RequestMapping("/")@Slf4jpublic class QuestionController {    @Resource    private QuestionSubmitService questionSubmitService;    @Resource    private QuestionService questionService;    @Resource    private UserFeignClient userFeignClient;    // region 增删改查    /**     * 创建     *     * @param questionAddRequest     * @param request     * @return     * 将请求参数转换为题目对象，并保存到数据库中，然后返回新题目的 ID     */    @PostMapping("/add")    public BaseResponse<Long> addQuestion(@RequestBody QuestionAddRequest questionAddRequest, HttpServletRequest request) {        //判断请求的参数是否为空        if (questionAddRequest == null) {            throw new BusinessException(ErrorCode.PARAMS_ERROR);        }        //new一个题目对象        Question question = new Question();        //将请求参数赋值给题目对象        BeanUtils.copyProperties(questionAddRequest, question);        //获取题目对象中的tag值        List<String> tags = questionAddRequest.getTags();        //判断tags是否为空        if (tags != null) {            //将tags转换成json字符串，并存入题目中            question.setTags(JSONUtil.toJsonStr(tags));        }        //获取题目中的judageCase        List<JudgeCase> judgeCase = questionAddRequest.getJudgeCase();        //判断是否为空        if(judgeCase!=null){            //转换成JSON格式并存入到题目中            question.setJudgeCase(JSONUtil.toJsonStr(judgeCase));        }        JudgeConfig judgeConfig = questionAddRequest.getJudgeConfig();        if(judgeConfig!=null){            question.setJudgeConfig(JSONUtil.toJsonStr(judgeConfig));        }        //调用校验方法校验        questionService.validQuestion(question, true);        //获取登录用户信息        User loginUser = userFeignClient.getLoginUser(request);        //存入到题目中        question.setUserId(loginUser.getId());        question.setFavourNum(0);        question.setThumbNum(0);        //保存题目返回boolean类型判断是否成功        boolean result = questionService.save(question);        //通过result是否成功来抛出对应的异常        ThrowUtils.throwIf(!result, ErrorCode.OPERATION_ERROR);        //获取题目中的id        long newQuestionId = question.getId();        //使用封装好的工具类调用success返回封装好的数据类型        return ResultUtils.success(newQuestionId);    }    /**     * 删除     *     * @param deleteRequest     * @param request     * @return     */    @PostMapping("/delete")    public BaseResponse<Boolean> deleteQuestion(@RequestBody DeleteRequest deleteRequest, HttpServletRequest request) {        if (deleteRequest == null || deleteRequest.getId() <= 0) {            throw new BusinessException(ErrorCode.PARAMS_ERROR);        }        User user = userFeignClient.getLoginUser(request);        long id = deleteRequest.getId();        // 判断是否存在        Question oldQuestion = questionService.getById(id);        ThrowUtils.throwIf(oldQuestion == null, ErrorCode.NOT_FOUND_ERROR);        // 仅本人或管理员可删除        if (!oldQuestion.getUserId().equals(user.getId()) && !userFeignClient.isAdmin(user)) {            throw new BusinessException(ErrorCode.NO_AUTH_ERROR);        }        boolean b = questionService.removeById(id);        return ResultUtils.success(b);    }    /**     * 更新（仅管理员）     *     * @param questionUpdateRequest     * @return     */    @PostMapping("/update")    @AuthCheck(mustRole = UserConstant.ADMIN_ROLE)    public BaseResponse<Boolean> updateQuestion(@RequestBody QuestionUpdateRequest questionUpdateRequest) {        //判断发送过来的请求是否为空或者id为0        if (questionUpdateRequest == null || questionUpdateRequest.getId() <= 0) {            throw new BusinessException(ErrorCode.PARAMS_ERROR);        }        //创建新的题目对象        Question question = new Question();        //将发送过来的请求中的题目对象复制给题目对象        BeanUtils.copyProperties(questionUpdateRequest, question);        //获取请求中的tags数据        List<String> tags = questionUpdateRequest.getTags();        //判断是否为空        if (tags != null) {            //转换成json格式的字符串并存入到题目对象中            question.setTags(JSONUtil.toJsonStr(tags));        }        List<JudgeCase> judgeCase = questionUpdateRequest.getJudgeCase();        if(judgeCase!=null){            question.setJudgeCase(JSONUtil.toJsonStr(judgeCase));        }        JudgeConfig judgeConfig = questionUpdateRequest.getJudgeConfig();        if(judgeConfig!=null){            question.setJudgeConfig(JSONUtil.toJsonStr(judgeConfig));        }        // 参数校验        questionService.validQuestion(question, false);        long id = questionUpdateRequest.getId();        // 通过查询id判断是否存在        Question oldQuestion = questionService.getById(id);        //如果查询为空，抛出对应的异常        ThrowUtils.throwIf(oldQuestion == null, ErrorCode.NOT_FOUND_ERROR);        //将封装好的题目进行通过对应的id进行修改        boolean result = questionService.updateById(question);        //返回        return ResultUtils.success(result);    }    /**     * 根据 id 获取(脱敏)     *     * @param id     * @return     */    @GetMapping("/get/vo")    public BaseResponse<QuestionVO> getQuestionVOById(long id, HttpServletRequest request) {        if (id <= 0) {            throw new BusinessException(ErrorCode.PARAMS_ERROR);        }        Question question = questionService.getById(id);        if (question == null) {            throw new BusinessException(ErrorCode.NOT_FOUND_ERROR);        }        //返回vo实体类数据，调用getQuestionVO方法获取拥有user信息的questionVO类        //getQuestionVO中调用了VO类中转换的方法objToVo将question转换成questionVO然后通过question的id信息查询        //到对应的user信息调用getUserVO方法转换成vo类的user存入questionVO中返回        return ResultUtils.success(questionService.getQuestionVO(question, request));    }    /**     * 根据id获取     * @param id     * @param request     * @return     */    @GetMapping("/get")    public BaseResponse<Question> getQuestionById(long id, HttpServletRequest request) {        System.out.println(id);        //todo:这是开始        if (id <= 0) {            throw new BusinessException(ErrorCode.PARAMS_ERROR);        }        Question question = questionService.getById(id);        if (question == null) {            throw new BusinessException(ErrorCode.NOT_FOUND_ERROR);        }        User loginUser = userFeignClient.getLoginUser(request);        if(!question.getUserId().equals(loginUser.getId())&&!userFeignClient.isAdmin(loginUser))        {            throw new BusinessException(ErrorCode.NO_AUTH_ERROR);        }        return ResultUtils.success(question);    }    /**     * 分页获取列表（仅管理员）     *     * @param questionQueryRequest     * @return     */    @PostMapping("/list/page")    @AuthCheck(mustRole = UserConstant.ADMIN_ROLE)    public BaseResponse<Page<Question>> listQuestionByPage(@RequestBody QuestionQueryRequest questionQueryRequest) {        long current = questionQueryRequest.getCurrent();        long size = questionQueryRequest.getPageSize();        Page<Question> questionPage = questionService.page(new Page<>(current, size),                questionService.getQueryWrapper(questionQueryRequest));        return ResultUtils.success(questionPage);    }    /**     * 分页获取列表（封装类）     *     * @param questionQueryRequest     * @param request     * @return     */    @PostMapping("/list/page/vo")    public BaseResponse<Page<QuestionVO>> listQuestionVOByPage(@RequestBody QuestionQueryRequest questionQueryRequest,            HttpServletRequest request) {        long current = questionQueryRequest.getCurrent();        long size = questionQueryRequest.getPageSize();        // 限制爬虫        ThrowUtils.throwIf(size > 20, ErrorCode.PARAMS_ERROR);        Page<Question> questionPage = questionService.page(new Page<>(current, size),                questionService.getQueryWrapper(questionQueryRequest));        return ResultUtils.success(questionService.getQuestionVOPage(questionPage, request));    }    /**     * 分页获取当前用户创建的资源列表     *     * @param questionQueryRequest     * @param request     * @return     */    @PostMapping("/my/list/page/vo")    public BaseResponse<Page<QuestionVO>> listMyQuestionVOByPage(@RequestBody QuestionQueryRequest questionQueryRequest,            HttpServletRequest request) {        if (questionQueryRequest == null) {            throw new BusinessException(ErrorCode.PARAMS_ERROR);        }        User loginUser = userFeignClient.getLoginUser(request);        questionQueryRequest.setUserId(loginUser.getId());        long current = questionQueryRequest.getCurrent();        long size = questionQueryRequest.getPageSize();        // 限制爬虫        ThrowUtils.throwIf(size > 20, ErrorCode.PARAMS_ERROR);        Page<Question> questionPage = questionService.page(new Page<>(current, size),                questionService.getQueryWrapper(questionQueryRequest));        return ResultUtils.success(questionService.getQuestionVOPage(questionPage, request));    }    // endregion    /**     * 分页搜索（从 ES 查询，封装类）     *     * @param questionQueryRequest     * @param request     * @return     *///    @PostMapping("/search/page/vo")//    public BaseResponse<Page<QuestionVO>> searchQuestionVOByPage(@RequestBody QuestionQueryRequest questionQueryRequest,//            HttpServletRequest request) {//        long size = questionQueryRequest.getPageSize();//        // 限制爬虫//        ThrowUtils.throwIf(size > 20, ErrorCode.PARAMS_ERROR);//        Page<Question> questionPage = questionService.searchFromEs(questionQueryRequest);//        return ResultUtils.success(questionService.getQuestionVOPage(questionPage, request));//    }    /**     * 编辑（用户）     *     * @param questionEditRequest     * @param request     * @return     */    @PostMapping("/edit")    public BaseResponse<Boolean> editQuestion(@RequestBody QuestionEditRequest questionEditRequest, HttpServletRequest request) {        if (questionEditRequest == null || questionEditRequest.getId() <= 0) {            throw new BusinessException(ErrorCode.PARAMS_ERROR);        }        Question question = new Question();        BeanUtils.copyProperties(questionEditRequest, question);        List<String> tags = questionEditRequest.getTags();        if (tags != null) {            question.setTags(JSONUtil.toJsonStr(tags));        }        List<JudgeCase> judgeCase = questionEditRequest.getJudgeCase();        if(judgeCase!=null){            question.setJudgeCase(JSONUtil.toJsonStr(judgeCase));        }        JudgeConfig judgeConfig = questionEditRequest.getJudgeConfig();        if(judgeConfig!=null){            question.setJudgeCase(JSONUtil.toJsonStr(judgeConfig));        }        // 参数校验        questionService.validQuestion(question, false);        User loginUser = userFeignClient.getLoginUser(request);        long id = questionEditRequest.getId();        // 判断是否存在        Question oldQuestion = questionService.getById(id);        ThrowUtils.throwIf(oldQuestion == null, ErrorCode.NOT_FOUND_ERROR);        // 仅本人或管理员可编辑        if (!oldQuestion.getUserId().equals(loginUser.getId()) && !userFeignClient.isAdmin(loginUser)) {            throw new BusinessException(ErrorCode.NO_AUTH_ERROR);        }        boolean result = questionService.updateById(question);        return ResultUtils.success(result);    }    /**     * 提交 / 取消题目     *     * @param questionSubmitAddRequest     * @param request     * @return resultNum 本次题目变化数     */    @PostMapping("/question_submit/do")    public BaseResponse<Long> doQuestionSubmit(@RequestBody QuestionSubmitAddRequest questionSubmitAddRequest,                                               HttpServletRequest request) {        if (questionSubmitAddRequest == null || questionSubmitAddRequest.getQuestionId() <= 0) {            throw new BusinessException(ErrorCode.PARAMS_ERROR);        }        // 登录才能提交题目        final User loginUser = userFeignClient.getLoginUser(request);        Long questionSubmit = questionSubmitService.doQuestionSubmit(questionSubmitAddRequest, loginUser);        return ResultUtils.success(questionSubmit);    }    /**     * 分页获取题目提交列表（除了管理员外，普通用户只能看到非答案，提交代码等公开信息）     * @param questionSubmitQueryRequest     * @return     */    @PostMapping("/question_submit/list/page")    public BaseResponse<Page<QuestionSubmitVO>> listQuestionSubmitByPage(@RequestBody QuestionSubmitQueryRequest questionSubmitQueryRequest, HttpServletRequest httpServletRequest) {        long current = questionSubmitQueryRequest.getCurrent();        long size = questionSubmitQueryRequest.getPageSize();        Page<QuestionSubmit> questionSubmitPage = questionSubmitService.page(new Page<>(current, size),                questionSubmitService.getQueryWrapper(questionSubmitQueryRequest));        final User loginUser = userFeignClient.getLoginUser(httpServletRequest);        //返回脱敏方法        return ResultUtils.success(questionSubmitService.getQuestionSubmitVOPage(questionSubmitPage,loginUser));    }}